- name: copy certificate file
  become: true
  become_user: root
  copy:
    src: "{{ server_certs_dir }}/{{ cert_pub_key }}"
    dest: "{{ server_certs_dir }}/{{ cert_pub_key }}_{{ ansible_fqdn }}"

- name: import the certificate to truststore
  become: true
  become_user: root
  command: >
    keytool -import
      -noprompt
      -alias "{{ ansible_fqdn }}"
      -file "{{ cert_pub_key }}_{{ ansible_fqdn }}"
      -keystore "{{ ca_cert_path }}"
      -storepass "{{ certs_jks_store_password }}"
  args:
    chdir: "{{ server_certs_dir }}"
    creates: "{{ cert_pub_key }}"

- name: copy all JKS file
  become: true
  become_user: root
  copy:
    src: "{{ client_certs_dir }}/{{ all_jks_file }}"
    dest: "{{ client_certs_dir }}/{{ all_jks_file }}"

- name: set directory permissions
  become: true
  become_user: root
  file:
    dest: "{{ item[0] }}"
    owner: root
    group: hadoop
    recurse: yes
    mode: 0755
  delegate_to: "{{ item[1] }}"
  with_nested:
    - [ "{{ server_certs_dir }}", "{{ client_certs_dir }}"]
    - "{{ all_hosts }}"
  when: item[1] != "{{ ansible_fqdn }}"

- name: set file permissions
  become: true
  become_user: root
  file:
    dest: "{{ item }}"
    owner: root
    group: hadoop
    mode: 0440
  with_items:
    - "{{ client_certs_dir }}/{{ all_jks_file }}"
    - "{{ server_certs_dir }}/{{ cert_pub_key }}"
    - "{{ server_certs_dir }}/{{ truststore_file }}"
    - "{{ server_certs_dir }}/{{ certs_jks_file }}"

- name: Create hadoop conf directory if missing
  file:
    path: "/etc/hadoop/conf"
    state: directory
  become: yes
  become_user: root

- name: copy hdfs conf file to all hosts
  template: src="{{ item.src }}" dest="{{ item.dest }}"
  become: yes
  become_user: root
  loop:
    - src: default_ssl_client_on_hosts.xml
      dest: /etc/hadoop/conf/ssl-client.xml
    - src: default_ssl_server_on_hosts.xml
      dest: /etc/hadoop/conf/ssl-server.xml

