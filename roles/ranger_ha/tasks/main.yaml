---
- set_fact:
    ansible_python_default_interpreter: "{{ ansible_python_interpreter }}"
    ansible_python_interpreter:  "/usr/bin/python"

- name: set_fact
  set_fact:
    all_hosts: "{{ groups['RANGER_ADMIN'] }}"

- name: Read all hosts and set it with index
  set_fact:
    ranger_host_{{ item.0 }} : "{{ item.1 }}"
  with_indexed_items: "{{ all_hosts }}"

- name: Install apache packages
  package:
    name: "{{ webserver_service }}"
    state: present
  become: yes
  become_user: root

- name: Install apache module packages
  package:
    name: "{{ item }}"
    state: present
  become: yes
  become_user: root
  with_items:
    - openssl-devel
    - gcc-c++
    - glibc-headers
    - glibc-devel
    - glibc
    - kernel-headers
    - openldap-devel
    - mod_ssl

- name: Check that the WE directory for ranger exists
  stat:
    path: "/etc/wire_encryption/ranger/"
  register: is_ranger_we
  become: yes
  become_user: root

- name: set properties accordingly if ranger WE is ON
  set_fact:
    ranger_protocol: https
    ranger_port: 6182
    ranger_loadbalancer_template: ranger_loadbalancer_ssl.conf.j2
  when: is_ranger_we.stat.exists == true

- name: create directory for Ranger certificates
  become: true
  file:
    path: "{{ ranger_ca_cert_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  when: is_ranger_we.stat.exists == true

- name: Creates sites-available directory
  file:
    path: "/etc/{{ webserver_service }}/sites-available"
    state: directory
    mode: 0777
  become: yes
  become_user: root

- name: Replace the port conflicts in the httpd ssl conf
  replace:
    dest: /etc/httpd/conf.d/ssl.conf
    regexp: '443'
    replace: '8043'
  become: yes
  become_user: root
  when: is_ranger_we.stat.exists == true

- name: create root CA certificate (local)
  command: >
    openssl req
      -new
      -x509
      -sha256
      -newkey "rsa:2048"
      -subj "{{ certs_ca_subject }}"
      -keyout "{{ certs_ca_key }}"
      -out "{{ certs_ca_cert }}"
      -days "{{ certs_ca_days }}"
      -passin "pass:{{ certs_ca_password }}"
      -passout "pass:{{ certs_ca_password }}"
  args:
    chdir: "{{ ranger_ca_cert_dir }}"
    creates: "{{ certs_ca_cert }}"
  run_once: true
  when: is_ranger_we.stat.exists == true

- name: Removing the passphrase from the private key
  command: >
    openssl rsa
      -in "{{ certs_ca_key }}"
      -out "{{ certs_ca_key }}"
      -passin "pass:{{ certs_ca_password }}"
  args:
    chdir: "{{ ranger_ca_cert_dir }}"
  run_once: true
  when: is_ranger_we.stat.exists == true

- name: Creates sites-enabled directory
  file:
    path: "/etc/{{ webserver_service }}/sites-enabled"
    state: directory
    mode: 0777
  become: yes
  become_user: root

- name: create virtual host file
  template: src="{{ ranger_loadbalancer_template }}" dest="/etc/{{ webserver_service }}/sites-available/{{ domain }}.conf"
  become: yes
  become_user: root

- name: create symlinks to enabled virtual hosts
  file:
    src: "/etc/{{ webserver_service }}/sites-available/{{ domain }}.conf"
    dest: "/etc/{{ webserver_service }}/sites-enabled/{{ domain }}.conf"
    state: link

- name: Append conf in httpd.conf file
  become: yes
  become_user: root
  lineinfile:
    path: "/etc/{{ webserver_service }}/conf/{{ webserver_service }}.conf"
    line: IncludeOptional sites-enabled/*.conf
  notify:
    - restart {{ webserver_service }}